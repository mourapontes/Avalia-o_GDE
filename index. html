<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>GDE - Avaliação de Desempenho</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">

  <style>
    :root {
      --color-primary: #4f46e5;
      --color-primary-dark: #4338ca;
      --color-primary-light: #eef2ff;
      --color-success: #10b981;
      --color-success-dark: #059669;
      --color-warning: #f59e0b;
      --color-warning-dark: #d97706;
      --color-danger: #ef4444;
      --color-bg: #f3f4f6;
      --color-text: #374151;
      --color-text-light: #6b7280;
      --color-border: #d1d5db;
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }

    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 20px;
      background-color: var(--color-bg);
      color: var(--color-text);
    }

    .container {
      max-width: 800px;
      margin: 20px auto;
      background: #fff;
      padding: 40px;
      border-radius: 16px;
      box-shadow: var(--shadow-md);
    }

    h2 {
      text-align: center;
      margin-top: 0;
      margin-bottom: 30px;
      font-size: 2rem;
      font-weight: 700;
      color: var(--color-text);
    }

    h3 {
      font-size: 1.25rem;
      font-weight: 600;
      margin-top: 40px;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid #e5e7eb;
      color: var(--color-primary);
    }

    .form-group {
      margin-bottom: 24px;
    }

    label {
      font-weight: 500;
      display: block;
      margin-bottom: 8px;
      font-size: 0.9rem;
    }
    
    .input-wrapper {
        position: relative;
    }

    .input-wrapper .icon {
        position: absolute;
        left: 16px;
        top: 50%;
        transform: translateY(-50%);
        width: 20px;
        height: 20px;
        color: var(--color-border);
        pointer-events: none;
        transition: color 0.3s;
    }

    input, select {
      width: 100%;
      padding: 14px 16px 14px 48px; /* Espaço para o ícone */
      border-radius: 8px;
      border: 1px solid var(--color-border);
      box-sizing: border-box;
      background-color: #fff;
      font-size: 1rem;
      font-family: 'Poppins', sans-serif;
      transition: border-color 0.3s, box-shadow 0.3s;
      -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    }
    
    select {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 1rem center;
        background-repeat: no-repeat;
        background-size: 1.25em;
    }

    .input-wrapper:focus-within .icon {
        color: var(--color-primary);
    }

    input:focus, select:focus {
      outline: none;
      border-color: var(--color-primary);
      box-shadow: 0 0 0 3px var(--color-primary-light);
    }

    select.select-green { background-color: #f0fdf4; border-color: var(--color-success); }
    select.select-yellow { background-color: #fefce8; border-color: var(--color-warning); }
    select.select-red { background-color: #fef2f2; border-color: var(--color-danger); }
    
    .button-container {
      display: flex;
      gap: 16px;
      margin-top: 40px;
      justify-content: flex-end;
      flex-wrap: wrap;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 12px 24px;
      font-size: 1rem;
      font-weight: 600;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s, box-shadow 0.3s;
      box-shadow: var(--shadow-sm);
    }
    
    .btn .icon { width: 20px; height: 20px; }

    .btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn-calcular { background-color: var(--color-success); color: white; }
    .btn-calcular:hover:not(:disabled) { background-color: var(--color-success-dark); }

    .btn-pdf { background-color: var(--color-primary); color: white; }
    .btn-pdf:hover:not(:disabled) { background-color: var(--color-primary-dark); }
    
    .btn-reiniciar { background-color: var(--color-warning); color: #422006; }
    .btn-reiniciar:hover:not(:disabled) { background-color: var(--color-warning-dark); }

    .btn:disabled { background-color: #e5e7eb; color: #9ca3af; cursor: not-allowed; }

    .resultado {
      margin-top: 40px;
      background: var(--color-primary-light);
      padding: 24px;
      border-radius: 12px;
      line-height: 1.8;
      display: none;
    }
    .resultado h4 {
        margin-top: 0;
        font-weight: 600;
        color: var(--color-primary);
    }
  </style>
</head>
<body>

  <!-- Definição de Ícones SVG -->
  <svg width="0" height="0" style="position:absolute">
    <symbol id="icon-user" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" /></symbol>
    <symbol id="icon-briefcase" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 2a2 2 0 00-2 2v1h4V4a2 2 0 00-2-2zM5 6h10a2 2 0 012 2v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2z" clip-rule="evenodd" /></symbol>
    <symbol id="icon-academic" viewBox="0 0 20 20" fill="currentColor"><path d="M10.394 2.08a1 1 0 00-.788 0l-7 3.5a1 1 0 00.028 1.826l7 3.5a1 1 0 00.732 0l7-3.5a1 1 0 00.028-1.826l-7-3.5zM3 9.42l7 3.5 7-3.5v3.08l-7 3.5-7-3.5V9.42z" /></symbol>
    <symbol id="icon-list" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" /></symbol>
    <symbol id="icon-calc" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V4a2 2 0 00-2-2H6zm1 2a1 1 0 00-1 1v2a1 1 0 001 1h6a1 1 0 001-1V5a1 1 0 00-1-1H7zM6 10a1 1 0 011-1h2a1 1 0 110 2H7a1 1 0 01-1-1zm0 4a1 1 0 011-1h2a1 1 0 110 2H7a1 1 0 01-1-1zm4-4a1 1 0 100 2h2a1 1 0 100-2h-2zm0 4a1 1 0 100 2h2a1 1 0 100-2h-2z" clip-rule="evenodd" /></symbol>
    <symbol id="icon-pdf" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3v-2a3 3 0 00-3-3H7a3 3 0 00-3 3v2H3a1 1 0 110-2V4zm2 2a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 4a1 1 0 100 2h4a1 1 0 100-2H7z" clip-rule="evenodd" /></symbol>
    <symbol id="icon-refresh" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 110 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" /></symbol>
  </svg>

  <div class="container">
    <h2>Avaliação de Desempenho</h2>
    <form id="formAvaliacao">
      <div class="form-group">
        <label for="nome">Nome do Servidor</label>
        <div class="input-wrapper">
            <svg class="icon"><use xlink:href="#icon-user"></use></svg>
            <input type="text" id="nome" name="nome" required>
        </div>
      </div>
      <div class="form-group">
        <label for="cargo">Cargo/Função</label>
        <div class="input-wrapper">
            <svg class="icon"><use xlink:href="#icon-briefcase"></use></svg>
            <input type="text" id="cargo" name="cargo" required>
        </div>
      </div>
      <div class="form-group">
        <label for="tipo">Tipo de Servidor</label>
        <div class="input-wrapper">
             <svg class="icon"><use xlink:href="#icon-academic"></use></svg>
            <select id="tipo" name="tipo">
              <option value="">-- Selecione --</option>
              <option value="docente">Docente</option>
              <option value="nao_docente">Não Docente</option>
            </select>
        </div>
      </div>
      <div class="form-group" id="group-modalidade" style="display:none;">
        <label for="modalidade">Modalidade de Ensino da Escola</label>
        <div class="input-wrapper">
             <svg class="icon"><use xlink:href="#icon-list"></use></svg>
            <select id="modalidade" name="modalidade">
              <option value="">-- Selecione --</option>
              <option value="infantil">Somente Educação Infantil</option>
              <option value="fundamental">Somente Ensino Fundamental</option>
              <option value="ambas">Ambas as Modalidades</option>
            </select>
        </div>
      </div>
      
      <div id="formularios"></div>

      <div class="button-container">
        <button type="button" id="btn-reiniciar" class="btn btn-reiniciar">
            <svg class="icon"><use xlink:href="#icon-refresh"></use></svg>
            <span>Reiniciar</span>
        </button>
        <button type="button" id="btn-pdf" class="btn btn-pdf" disabled>
            <svg class="icon"><use xlink:href="#icon-pdf"></use></svg>
            <span>Gerar PDF</span>
        </button>
        <button type="button" id="btn-calcular" class="btn btn-calcular">
            <svg class="icon"><use xlink:href="#icon-calc"></use></svg>
            <span>Calcular</span>
        </button>
      </div>
      
      <div class="resultado" id="resultado">
        <h4>Resultados da Avaliação</h4>
        <div id="resultado-content"></div>
      </div>
    </form>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script>
    // Seletores de elementos do DOM
    const form = document.getElementById('formAvaliacao');
    const tipoSelect = document.getElementById('tipo');
    const divFormularios = document.getElementById('formularios');
    const resultadoDiv = document.getElementById('resultado');
    const resultadoContent = document.getElementById('resultado-content');
    const btnCalcular = document.getElementById('btn-calcular');
    const btnPdf = document.getElementById('btn-pdf');
    const btnReiniciar = document.getElementById('btn-reiniciar');
    const groupModalidade = document.getElementById('group-modalidade');
    let dadosCalculados = null;

    // Constantes de critérios
    const criteriosDesempenhoDocente = ["1. Assiduidade", "2. Pontualidade", "3. Plano de Trabalho Pedagógico", "4. Respeito e Urbanidade", "5. Comunicação com Coordenação", "6. Registro no Diário de Classe", "7. Cumprimento de Atividades"];
    const criteriosDesempenhoNaoDocente = ["1. Assiduidade", "2. Pontualidade", "3. Cumprimento de Atividades", "4. Respeito e Urbanidade"];
    const opcoesPadrao = [{ texto: "(4) Excelente / Sempre", valor: 4 }, { texto: "(3) Bom", valor: 3 }, { texto: "(2) Regular", valor: 2 }, { texto: "(1) Ruim", valor: 1 }, { texto: "(0) Insatisfatório", valor: 0 }];
    const criteriosMetas = ["1. Avaliação da Educação Infantil", "2. Avaliação de Língua Portuguesa", "3. Avaliação de Matemática"];
    const criteriosFormacaoDocente = ["1. Participação no Planejamento Pedagógico", "2. Participação na Jornada Pedagógica"];
    const criteriosFormacaoNaoDocente = ["1. PARTICIPA DE FORMAÇÃO CONTINUADA OFERTADA PELO MUNICÍPIO"];
    const opcoesFormacaoNaoDocente = [
      { texto: "(10) Não possui faltas", valor: 10 },
      { texto: "(7) De 1 (uma) a 2 (duas) faltas", valor: 7 },
      { texto: "(5) De 3 (três) a 4 (quatro) faltas", valor: 5 },
      { texto: "(3) De 5 (cinco) a 6 (seis) faltas", valor: 3 },
      { texto: "(0) Acima de 6 (seis) faltas", valor: 0 }
    ];

    // Funções do aplicativo
    function carregarFormulario() {
      const tipo = tipoSelect.value;
      divFormularios.innerHTML = "";
      resultadoDiv.style.display = 'none';
      if (!tipo) {
        divFormularios.style.display = "none";
        groupModalidade.style.display = "none";
        return;
      }
      groupModalidade.style.display = "block";
      if (tipo === 'docente') {
        adicionarGrupo("desempenho", "Critérios de Desempenho", criteriosDesempenhoDocente, opcoesPadrao);
        adicionarGrupo("formacao", "Critérios de Formação", criteriosFormacaoDocente, opcoesPadrao);
      } else if (tipo === 'nao_docente') {
        adicionarGrupo("desempenho", "Critérios de Desempenho", criteriosDesempenhoNaoDocente, opcoesPadrao);
        adicionarGrupo("formacao", "Formação e Capacitação", criteriosFormacaoNaoDocente, opcoesFormacaoNaoDocente);
      }
      adicionarGrupo("metas", "Metas", criteriosMetas, opcoesPadrao);
    }

    function adicionarGrupo(grupo, tituloText, lista, opcoes) {
      const titulo = document.createElement("h3");
      titulo.textContent = tituloText;
      divFormularios.appendChild(titulo);
      lista.forEach((criterio, i) => {
        const grupoDiv = document.createElement("div");
        grupoDiv.className = "form-group";
        const label = document.createElement("label");
        label.innerText = criterio;
        
        const wrapper = document.createElement('div');
        wrapper.className = 'input-wrapper';
        
        const select = document.createElement("select");
        select.name = `${grupo}_${i}`;
        const defaultOpt = document.createElement("option");
        defaultOpt.value = "";
        defaultOpt.innerText = "-- Avalie --";
        defaultOpt.disabled = true;
        defaultOpt.selected = true;
        select.appendChild(defaultOpt);
        opcoes.forEach(opcao => {
          const opt = document.createElement("option");
          opt.value = opcao.valor;
          opt.innerText = opcao.texto;
          select.appendChild(opt);
        });
        
        wrapper.appendChild(select);
        grupoDiv.appendChild(label);
        grupoDiv.appendChild(wrapper);
        divFormularios.appendChild(grupoDiv);
      });
    }

    function calcular() {
      const nome = document.getElementById("nome").value;
      const cargo = document.getElementById("cargo").value;
      const tipo = tipoSelect.value;
      const modalidade = document.getElementById("modalidade").value;
      
      if (!nome || !cargo || !tipo || !modalidade) {
        alert("Todos os campos de identificação são obrigatórios.");
        return;
      }
      
      const desempenhoSoma = somarValores("desempenho_");
      const formacaoSoma = somarValores("formacao_");
      let notaDesempenho, notaFormacao;

      if (tipo === 'docente') {
        notaDesempenho = (desempenhoSoma / 2.8).toFixed(2);
        notaFormacao = ((formacaoSoma / 8) * 10).toFixed(2);
      } else {
        notaDesempenho = (desempenhoSoma / 1.6).toFixed(2);
        notaFormacao = formacaoSoma.toFixed(2);
      }
      
      const metasValores = [];
      document.querySelectorAll("select[name^='metas_']").forEach(s => metasValores.push(parseInt(s.value) || 0));
      let notaMetasCalculada = 0;
      if (modalidade === "infantil") notaMetasCalculada = metasValores[0] * 2.5;
      else if (modalidade === "fundamental") notaMetasCalculada = (metasValores[1] + metasValores[2]) * 1.25;
      else if (modalidade === "ambas") notaMetasCalculada = (metasValores[0] + metasValores[1] + metasValores[2]) * (10 / 12);
      const notaMetas = notaMetasCalculada.toFixed(2);
      
      dadosCalculados = { nome, cargo, notaDesempenho, notaFormacao, notaMetas };
      
      resultadoContent.innerHTML = `<strong>${nome}</strong> - ${cargo}<br>
        Nota Desempenho: <strong>${notaDesempenho}</strong><br>
        Nota Formação: <strong>${notaFormacao}</strong><br>
        Nota Metas: <strong>${notaMetas}</strong>`;
      resultadoDiv.style.display = "block";
      btnPdf.disabled = false;
    }

    function somarValores(prefixo) {
      let total = 0;
      document.querySelectorAll(`select[name^='${prefixo}']`).forEach(sel => total += parseInt(sel.value) || 0);
      return total;
    }
    
    function gerarPDF() {
        if (!dadosCalculados) return;
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        const pageW = doc.internal.pageSize.getWidth();

        // Cabeçalho Oficial
        doc.setFont("Poppins", "bold");
        doc.setFontSize(14);
        doc.text("Prefeitura Municipal de Cristino Castro-PI", pageW / 2, 20, { align: 'center' });
        doc.setFont("Poppins", "normal");
        doc.setFontSize(12);
        doc.text("Comissão de Avaliação de Desempenho", pageW / 2, 28, { align: 'center' });
        doc.setFontSize(10);
        doc.text("Lei Municipal Nº 266/2025", pageW / 2, 36, { align: 'center' });
        doc.setLineWidth(0.5);
        doc.line(20, 45, pageW - 20, 45);

        // Título e dados
        doc.setFont("Poppins", "bold");
        doc.setFontSize(14);
        doc.text("Relatório de Avaliação de Desempenho GDE", pageW / 2, 55, { align: 'center' });
        doc.setFont("Poppins", "normal");
        doc.setFontSize(12);
        const yInicialCorpo = 70;
        doc.text(`Servidor: ${dadosCalculados.nome}`, 20, yInicialCorpo);
        doc.text(`Cargo/Função: ${dadosCalculados.cargo}`, 20, yInicialCorpo + 10);
        const agora = new Date();
        const dataHoraFormatada = agora.toLocaleString('pt-BR', { dateStyle: 'short', timeStyle: 'short' });
        doc.setFont("Poppins", "italic");
        doc.setFontSize(9);
        doc.text(`Gerado em: ${dataHoraFormatada}`, pageW - 20, yInicialCorpo + 10, { align: 'right' });

        // Quadro de Notas
        const tableX = 20, tableY = yInicialCorpo + 25;
        const col1Width = 130, col2Width = 40, rowHeight = 10, tableWidth = col1Width + col2Width;
        const notesData = [
            { criterio: "Nota Desempenho", nota: dadosCalculados.notaDesempenho },
            { criterio: "Nota Formação", nota: dadosCalculados.notaFormacao },
            { criterio: "Nota Metas", nota: dadosCalculados.notaMetas }
        ];
        doc.setFillColor(230, 230, 230);
        doc.rect(tableX, tableY, tableWidth, rowHeight, 'F');
        doc.setFont("Poppins", "bold");
        doc.setFontSize(12);
        doc.text("Critério de Avaliação", tableX + 5, tableY + 7);
        doc.text("Nota", tableX + col1Width + (col2Width / 2), tableY + 7, { align: 'center' });
        doc.setFont("Poppins", "normal");
        notesData.forEach((item, index) => {
            const currentY = tableY + (index + 1) * rowHeight;
            doc.rect(tableX, currentY, col1Width, rowHeight);
            doc.rect(tableX + col1Width, currentY, col2Width, rowHeight);
            doc.text(item.criterio, tableX + 5, currentY + 7);
            doc.text(item.nota, tableX + col1Width + (col2Width / 2), currentY + 7, { align: 'center' });
        });

        // Assinaturas
        let yAtual = tableY + (notesData.length + 1) * rowHeight + 25;
        const espacoEntreAssinaturas = 20, larguraLinha = 80;
        const x1 = (pageW - larguraLinha) / 2, x2 = x1 + larguraLinha;
        doc.setFontSize(10);
        for (let i = 0; i < 5; i++) {
            if (yAtual > 270) { doc.addPage(); yAtual = 30; }
            doc.line(x1, yAtual, x2, yAtual);
            doc.text("Membro da Comissão", pageW / 2, yAtual + 5, { align: 'center' });
            yAtual += espacoEntreAssinaturas;
        }
        
        doc.save(`avaliacao_gde_${dadosCalculados.nome.replace(/\s+/g, '_')}.pdf`);
    }

    function reiniciarForm() {
      form.reset();
      divFormularios.innerHTML = "";
      groupModalidade.style.display = "none";
      resultadoDiv.style.display = "none";
      btnPdf.disabled = true;
      dadosCalculados = null;
      document.querySelectorAll('select').forEach(sel => sel.classList.remove('select-green', 'select-yellow', 'select-red'));
    }

    function atualizarCorSelect(selectElement) {
      const valor = parseInt(selectElement.value, 10);
      selectElement.classList.remove('select-green', 'select-yellow', 'select-red');
      const maxValor = Array.from(selectElement.options).reduce((max, opt) => Math.max(max, parseInt(opt.value) || 0), 0);
      if (maxValor > 4) {
        if (valor >= 7) selectElement.classList.add('select-green');
        else if (valor >= 3) selectElement.classList.add('select-yellow');
        else selectElement.classList.add('select-red');
      } else {
        if (valor >= 3) selectElement.classList.add('select-green');
        else if (valor === 2) selectElement.classList.add('select-yellow');
        else selectElement.classList.add('select-red');
      }
    }

    // Event Listeners
    tipoSelect.addEventListener('change', carregarFormulario);
    btnCalcular.addEventListener('click', calcular);
    btnPdf.addEventListener('click', gerarPDF);
    btnReiniciar.addEventListener('click', reiniciarForm);
    form.addEventListener('change', (e) => {
      btnPdf.disabled = true;
      if (e.target.tagName === 'SELECT') {
        atualizarCorSelect(e.target);
      }
    });
  </script>
</body>
</html>
